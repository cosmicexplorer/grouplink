/* automatically generated by rust-bindgen 0.56.0 */

pub const SG_SUCCESS: u32 = 0;
pub const SG_ERR_NOMEM: i32 = -12;
pub const SG_ERR_INVAL: i32 = -22;
pub const SG_ERR_UNKNOWN: i32 = -1000;
pub const SG_ERR_DUPLICATE_MESSAGE: i32 = -1001;
pub const SG_ERR_INVALID_KEY: i32 = -1002;
pub const SG_ERR_INVALID_KEY_ID: i32 = -1003;
pub const SG_ERR_INVALID_MAC: i32 = -1004;
pub const SG_ERR_INVALID_MESSAGE: i32 = -1005;
pub const SG_ERR_INVALID_VERSION: i32 = -1006;
pub const SG_ERR_LEGACY_MESSAGE: i32 = -1007;
pub const SG_ERR_NO_SESSION: i32 = -1008;
pub const SG_ERR_STALE_KEY_EXCHANGE: i32 = -1009;
pub const SG_ERR_UNTRUSTED_IDENTITY: i32 = -1010;
pub const SG_ERR_VRF_SIG_VERIF_FAILED: i32 = -1011;
pub const SG_ERR_INVALID_PROTO_BUF: i32 = -1100;
pub const SG_ERR_FP_VERSION_MISMATCH: i32 = -1200;
pub const SG_ERR_FP_IDENT_MISMATCH: i32 = -1201;
pub const SG_ERR_MINIMUM: i32 = -9999;
pub const SG_LOG_ERROR: u32 = 0;
pub const SG_LOG_WARNING: u32 = 1;
pub const SG_LOG_NOTICE: u32 = 2;
pub const SG_LOG_INFO: u32 = 3;
pub const SG_LOG_DEBUG: u32 = 4;
pub const SG_CIPHER_AES_CTR_NOPADDING: u32 = 1;
pub const SG_CIPHER_AES_CBC_PKCS5: u32 = 2;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type size_t = __darwin_size_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct signal_type_base {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct signal_buffer {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct signal_buffer_list {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct signal_int_list {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct signal_context {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct signal_protocol_store_context {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct signal_protocol_address {
  pub name: *const ::std::os::raw::c_char,
  pub name_len: size_t,
  pub device_id: i32,
}
#[test]
fn bindgen_test_layout_signal_protocol_address() {
  assert_eq!(
    ::std::mem::size_of::<signal_protocol_address>(),
    24usize,
    concat!("Size of: ", stringify!(signal_protocol_address))
  );
  assert_eq!(
    ::std::mem::align_of::<signal_protocol_address>(),
    8usize,
    concat!("Alignment of ", stringify!(signal_protocol_address))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<signal_protocol_address>())).name as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_address),
      "::",
      stringify!(name)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<signal_protocol_address>())).name_len as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_address),
      "::",
      stringify!(name_len)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<signal_protocol_address>())).device_id as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_address),
      "::",
      stringify!(device_id)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct signal_protocol_sender_key_name {
  pub group_id: *const ::std::os::raw::c_char,
  pub group_id_len: size_t,
  pub sender: signal_protocol_address,
}
#[test]
fn bindgen_test_layout_signal_protocol_sender_key_name() {
  assert_eq!(
    ::std::mem::size_of::<signal_protocol_sender_key_name>(),
    40usize,
    concat!("Size of: ", stringify!(signal_protocol_sender_key_name))
  );
  assert_eq!(
    ::std::mem::align_of::<signal_protocol_sender_key_name>(),
    8usize,
    concat!("Alignment of ", stringify!(signal_protocol_sender_key_name))
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_sender_key_name>())).group_id as *const _ as usize
    },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_sender_key_name),
      "::",
      stringify!(group_id)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_sender_key_name>())).group_id_len as *const _ as usize
    },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_sender_key_name),
      "::",
      stringify!(group_id_len)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_sender_key_name>())).sender as *const _ as usize
    },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_sender_key_name),
      "::",
      stringify!(sender)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_public_key {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_key_pair {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct signal_protocol_key_helper_pre_key_list_node {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct signal_message {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pre_key_signal_message {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ratchet_identity_key_pair {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct session_pre_key {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct session_signed_pre_key {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct session_record {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sender_key_record {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct symmetric_signal_protocol_parameters {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alice_signal_protocol_parameters {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bob_signal_protocol_parameters {
  _unused: [u8; 0],
}
extern "C" {
  pub fn symmetric_signal_protocol_parameters_create(
    parameters: *mut *mut symmetric_signal_protocol_parameters,
    our_identity_key: *mut ratchet_identity_key_pair,
    our_base_key: *mut ec_key_pair,
    our_ratchet_key: *mut ec_key_pair,
    their_base_key: *mut ec_public_key,
    their_ratchet_key: *mut ec_public_key,
    their_identity_key: *mut ec_public_key,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn symmetric_signal_protocol_parameters_get_our_identity_key(
    parameters: *const symmetric_signal_protocol_parameters,
  ) -> *mut ratchet_identity_key_pair;
}
extern "C" {
  pub fn symmetric_signal_protocol_parameters_get_our_base_key(
    parameters: *const symmetric_signal_protocol_parameters,
  ) -> *mut ec_key_pair;
}
extern "C" {
  pub fn symmetric_signal_protocol_parameters_get_our_ratchet_key(
    parameters: *const symmetric_signal_protocol_parameters,
  ) -> *mut ec_key_pair;
}
extern "C" {
  pub fn symmetric_signal_protocol_parameters_get_their_base_key(
    parameters: *const symmetric_signal_protocol_parameters,
  ) -> *mut ec_public_key;
}
extern "C" {
  pub fn symmetric_signal_protocol_parameters_get_their_ratchet_key(
    parameters: *const symmetric_signal_protocol_parameters,
  ) -> *mut ec_public_key;
}
extern "C" {
  pub fn symmetric_signal_protocol_parameters_get_their_identity_key(
    parameters: *const symmetric_signal_protocol_parameters,
  ) -> *mut ec_public_key;
}
extern "C" {
  pub fn symmetric_signal_protocol_parameters_destroy(type_: *mut signal_type_base);
}
extern "C" {
  pub fn alice_signal_protocol_parameters_create(
    parameters: *mut *mut alice_signal_protocol_parameters,
    our_identity_key: *mut ratchet_identity_key_pair,
    our_base_key: *mut ec_key_pair,
    their_identity_key: *mut ec_public_key,
    their_signed_pre_key: *mut ec_public_key,
    their_one_time_pre_key: *mut ec_public_key,
    their_ratchet_key: *mut ec_public_key,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn alice_signal_protocol_parameters_destroy(type_: *mut signal_type_base);
}
extern "C" {
  pub fn bob_signal_protocol_parameters_create(
    parameters: *mut *mut bob_signal_protocol_parameters,
    our_identity_key: *mut ratchet_identity_key_pair,
    our_signed_pre_key: *mut ec_key_pair,
    our_one_time_pre_key: *mut ec_key_pair,
    our_ratchet_key: *mut ec_key_pair,
    their_identity_key: *mut ec_public_key,
    their_base_key: *mut ec_public_key,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn bob_signal_protocol_parameters_destroy(type_: *mut signal_type_base);
}
extern "C" {
  pub fn signal_type_ref(instance: *mut signal_type_base);
}
extern "C" {
  pub fn signal_type_unref(instance: *mut signal_type_base);
}
extern "C" {
  pub fn signal_buffer_alloc(len: size_t) -> *mut signal_buffer;
}
extern "C" {
  pub fn signal_buffer_create(data: *const u8, len: size_t) -> *mut signal_buffer;
}
extern "C" {
  pub fn signal_buffer_copy(buffer: *const signal_buffer) -> *mut signal_buffer;
}
extern "C" {
  pub fn signal_buffer_n_copy(buffer: *const signal_buffer, n: size_t) -> *mut signal_buffer;
}
extern "C" {
  pub fn signal_buffer_append(
    buffer: *mut signal_buffer,
    data: *const u8,
    len: size_t,
  ) -> *mut signal_buffer;
}
extern "C" {
  pub fn signal_buffer_data(buffer: *mut signal_buffer) -> *mut u8;
}
extern "C" {
  pub fn signal_buffer_const_data(buffer: *const signal_buffer) -> *const u8;
}
extern "C" {
  pub fn signal_buffer_len(buffer: *const signal_buffer) -> size_t;
}
extern "C" {
  pub fn signal_buffer_compare(
    buffer1: *mut signal_buffer,
    buffer2: *mut signal_buffer,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_buffer_free(buffer: *mut signal_buffer);
}
extern "C" {
  pub fn signal_buffer_bzero_free(buffer: *mut signal_buffer);
}
extern "C" {
  pub fn signal_buffer_list_alloc() -> *mut signal_buffer_list;
}
extern "C" {
  pub fn signal_buffer_list_copy(list: *const signal_buffer_list) -> *mut signal_buffer_list;
}
extern "C" {
  pub fn signal_buffer_list_push_back(
    list: *mut signal_buffer_list,
    buffer: *mut signal_buffer,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_buffer_list_size(list: *mut signal_buffer_list) -> ::std::os::raw::c_uint;
}
extern "C" {
  pub fn signal_buffer_list_at(
    list: *mut signal_buffer_list,
    index: ::std::os::raw::c_uint,
  ) -> *mut signal_buffer;
}
extern "C" {
  pub fn signal_buffer_list_free(list: *mut signal_buffer_list);
}
extern "C" {
  pub fn signal_buffer_list_bzero_free(list: *mut signal_buffer_list);
}
extern "C" {
  pub fn signal_int_list_alloc() -> *mut signal_int_list;
}
extern "C" {
  pub fn signal_int_list_push_back(
    list: *mut signal_int_list,
    value: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_int_list_size(list: *mut signal_int_list) -> ::std::os::raw::c_uint;
}
extern "C" {
  pub fn signal_int_list_at(
    list: *mut signal_int_list,
    index: ::std::os::raw::c_uint,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_int_list_free(list: *mut signal_int_list);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct signal_crypto_provider {
  pub random_func: ::std::option::Option<
    unsafe extern "C" fn(
      data: *mut u8,
      len: size_t,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub hmac_sha256_init_func: ::std::option::Option<
    unsafe extern "C" fn(
      hmac_context: *mut *mut ::std::os::raw::c_void,
      key: *const u8,
      key_len: size_t,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub hmac_sha256_update_func: ::std::option::Option<
    unsafe extern "C" fn(
      hmac_context: *mut ::std::os::raw::c_void,
      data: *const u8,
      data_len: size_t,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub hmac_sha256_final_func: ::std::option::Option<
    unsafe extern "C" fn(
      hmac_context: *mut ::std::os::raw::c_void,
      output: *mut *mut signal_buffer,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub hmac_sha256_cleanup_func: ::std::option::Option<
    unsafe extern "C" fn(
      hmac_context: *mut ::std::os::raw::c_void,
      user_data: *mut ::std::os::raw::c_void,
    ),
  >,
  pub sha512_digest_init_func: ::std::option::Option<
    unsafe extern "C" fn(
      digest_context: *mut *mut ::std::os::raw::c_void,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub sha512_digest_update_func: ::std::option::Option<
    unsafe extern "C" fn(
      digest_context: *mut ::std::os::raw::c_void,
      data: *const u8,
      data_len: size_t,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub sha512_digest_final_func: ::std::option::Option<
    unsafe extern "C" fn(
      digest_context: *mut ::std::os::raw::c_void,
      output: *mut *mut signal_buffer,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub sha512_digest_cleanup_func: ::std::option::Option<
    unsafe extern "C" fn(
      digest_context: *mut ::std::os::raw::c_void,
      user_data: *mut ::std::os::raw::c_void,
    ),
  >,
  pub encrypt_func: ::std::option::Option<
    unsafe extern "C" fn(
      output: *mut *mut signal_buffer,
      cipher: ::std::os::raw::c_int,
      key: *const u8,
      key_len: size_t,
      iv: *const u8,
      iv_len: size_t,
      plaintext: *const u8,
      plaintext_len: size_t,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub decrypt_func: ::std::option::Option<
    unsafe extern "C" fn(
      output: *mut *mut signal_buffer,
      cipher: ::std::os::raw::c_int,
      key: *const u8,
      key_len: size_t,
      iv: *const u8,
      iv_len: size_t,
      ciphertext: *const u8,
      ciphertext_len: size_t,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub user_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_signal_crypto_provider() {
  assert_eq!(
    ::std::mem::size_of::<signal_crypto_provider>(),
    96usize,
    concat!("Size of: ", stringify!(signal_crypto_provider))
  );
  assert_eq!(
    ::std::mem::align_of::<signal_crypto_provider>(),
    8usize,
    concat!("Alignment of ", stringify!(signal_crypto_provider))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<signal_crypto_provider>())).random_func as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_crypto_provider),
      "::",
      stringify!(random_func)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_crypto_provider>())).hmac_sha256_init_func as *const _ as usize
    },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_crypto_provider),
      "::",
      stringify!(hmac_sha256_init_func)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_crypto_provider>())).hmac_sha256_update_func as *const _
        as usize
    },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_crypto_provider),
      "::",
      stringify!(hmac_sha256_update_func)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_crypto_provider>())).hmac_sha256_final_func as *const _ as usize
    },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_crypto_provider),
      "::",
      stringify!(hmac_sha256_final_func)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_crypto_provider>())).hmac_sha256_cleanup_func as *const _
        as usize
    },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_crypto_provider),
      "::",
      stringify!(hmac_sha256_cleanup_func)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_crypto_provider>())).sha512_digest_init_func as *const _
        as usize
    },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_crypto_provider),
      "::",
      stringify!(sha512_digest_init_func)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_crypto_provider>())).sha512_digest_update_func as *const _
        as usize
    },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_crypto_provider),
      "::",
      stringify!(sha512_digest_update_func)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_crypto_provider>())).sha512_digest_final_func as *const _
        as usize
    },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_crypto_provider),
      "::",
      stringify!(sha512_digest_final_func)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_crypto_provider>())).sha512_digest_cleanup_func as *const _
        as usize
    },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_crypto_provider),
      "::",
      stringify!(sha512_digest_cleanup_func)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<signal_crypto_provider>())).encrypt_func as *const _ as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_crypto_provider),
      "::",
      stringify!(encrypt_func)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<signal_crypto_provider>())).decrypt_func as *const _ as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_crypto_provider),
      "::",
      stringify!(decrypt_func)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<signal_crypto_provider>())).user_data as *const _ as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_crypto_provider),
      "::",
      stringify!(user_data)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct signal_protocol_session_store {
  pub load_session_func: ::std::option::Option<
    unsafe extern "C" fn(
      record: *mut *mut signal_buffer,
      user_record: *mut *mut signal_buffer,
      address: *const signal_protocol_address,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub get_sub_device_sessions_func: ::std::option::Option<
    unsafe extern "C" fn(
      sessions: *mut *mut signal_int_list,
      name: *const ::std::os::raw::c_char,
      name_len: size_t,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub store_session_func: ::std::option::Option<
    unsafe extern "C" fn(
      address: *const signal_protocol_address,
      record: *mut u8,
      record_len: size_t,
      user_record: *mut u8,
      user_record_len: size_t,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub contains_session_func: ::std::option::Option<
    unsafe extern "C" fn(
      address: *const signal_protocol_address,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub delete_session_func: ::std::option::Option<
    unsafe extern "C" fn(
      address: *const signal_protocol_address,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub delete_all_sessions_func: ::std::option::Option<
    unsafe extern "C" fn(
      name: *const ::std::os::raw::c_char,
      name_len: size_t,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub destroy_func:
    ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
  pub user_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_signal_protocol_session_store() {
  assert_eq!(
    ::std::mem::size_of::<signal_protocol_session_store>(),
    64usize,
    concat!("Size of: ", stringify!(signal_protocol_session_store))
  );
  assert_eq!(
    ::std::mem::align_of::<signal_protocol_session_store>(),
    8usize,
    concat!("Alignment of ", stringify!(signal_protocol_session_store))
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_session_store>())).load_session_func as *const _
        as usize
    },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_session_store),
      "::",
      stringify!(load_session_func)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_session_store>())).get_sub_device_sessions_func
        as *const _ as usize
    },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_session_store),
      "::",
      stringify!(get_sub_device_sessions_func)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_session_store>())).store_session_func as *const _
        as usize
    },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_session_store),
      "::",
      stringify!(store_session_func)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_session_store>())).contains_session_func as *const _
        as usize
    },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_session_store),
      "::",
      stringify!(contains_session_func)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_session_store>())).delete_session_func as *const _
        as usize
    },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_session_store),
      "::",
      stringify!(delete_session_func)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_session_store>())).delete_all_sessions_func as *const _
        as usize
    },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_session_store),
      "::",
      stringify!(delete_all_sessions_func)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_session_store>())).destroy_func as *const _ as usize
    },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_session_store),
      "::",
      stringify!(destroy_func)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_session_store>())).user_data as *const _ as usize
    },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_session_store),
      "::",
      stringify!(user_data)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct signal_protocol_pre_key_store {
  pub load_pre_key: ::std::option::Option<
    unsafe extern "C" fn(
      record: *mut *mut signal_buffer,
      pre_key_id: u32,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub store_pre_key: ::std::option::Option<
    unsafe extern "C" fn(
      pre_key_id: u32,
      record: *mut u8,
      record_len: size_t,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub contains_pre_key: ::std::option::Option<
    unsafe extern "C" fn(
      pre_key_id: u32,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub remove_pre_key: ::std::option::Option<
    unsafe extern "C" fn(
      pre_key_id: u32,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub destroy_func:
    ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
  pub user_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_signal_protocol_pre_key_store() {
  assert_eq!(
    ::std::mem::size_of::<signal_protocol_pre_key_store>(),
    48usize,
    concat!("Size of: ", stringify!(signal_protocol_pre_key_store))
  );
  assert_eq!(
    ::std::mem::align_of::<signal_protocol_pre_key_store>(),
    8usize,
    concat!("Alignment of ", stringify!(signal_protocol_pre_key_store))
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_pre_key_store>())).load_pre_key as *const _ as usize
    },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_pre_key_store),
      "::",
      stringify!(load_pre_key)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_pre_key_store>())).store_pre_key as *const _ as usize
    },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_pre_key_store),
      "::",
      stringify!(store_pre_key)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_pre_key_store>())).contains_pre_key as *const _
        as usize
    },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_pre_key_store),
      "::",
      stringify!(contains_pre_key)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_pre_key_store>())).remove_pre_key as *const _ as usize
    },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_pre_key_store),
      "::",
      stringify!(remove_pre_key)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_pre_key_store>())).destroy_func as *const _ as usize
    },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_pre_key_store),
      "::",
      stringify!(destroy_func)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_pre_key_store>())).user_data as *const _ as usize
    },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_pre_key_store),
      "::",
      stringify!(user_data)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct signal_protocol_signed_pre_key_store {
  pub load_signed_pre_key: ::std::option::Option<
    unsafe extern "C" fn(
      record: *mut *mut signal_buffer,
      signed_pre_key_id: u32,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub store_signed_pre_key: ::std::option::Option<
    unsafe extern "C" fn(
      signed_pre_key_id: u32,
      record: *mut u8,
      record_len: size_t,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub contains_signed_pre_key: ::std::option::Option<
    unsafe extern "C" fn(
      signed_pre_key_id: u32,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub remove_signed_pre_key: ::std::option::Option<
    unsafe extern "C" fn(
      signed_pre_key_id: u32,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub destroy_func:
    ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
  pub user_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_signal_protocol_signed_pre_key_store() {
  assert_eq!(
    ::std::mem::size_of::<signal_protocol_signed_pre_key_store>(),
    48usize,
    concat!(
      "Size of: ",
      stringify!(signal_protocol_signed_pre_key_store)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<signal_protocol_signed_pre_key_store>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(signal_protocol_signed_pre_key_store)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_signed_pre_key_store>())).load_signed_pre_key
        as *const _ as usize
    },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_signed_pre_key_store),
      "::",
      stringify!(load_signed_pre_key)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_signed_pre_key_store>())).store_signed_pre_key
        as *const _ as usize
    },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_signed_pre_key_store),
      "::",
      stringify!(store_signed_pre_key)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_signed_pre_key_store>())).contains_signed_pre_key
        as *const _ as usize
    },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_signed_pre_key_store),
      "::",
      stringify!(contains_signed_pre_key)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_signed_pre_key_store>())).remove_signed_pre_key
        as *const _ as usize
    },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_signed_pre_key_store),
      "::",
      stringify!(remove_signed_pre_key)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_signed_pre_key_store>())).destroy_func as *const _
        as usize
    },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_signed_pre_key_store),
      "::",
      stringify!(destroy_func)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_signed_pre_key_store>())).user_data as *const _
        as usize
    },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_signed_pre_key_store),
      "::",
      stringify!(user_data)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct signal_protocol_identity_key_store {
  pub get_identity_key_pair: ::std::option::Option<
    unsafe extern "C" fn(
      public_data: *mut *mut signal_buffer,
      private_data: *mut *mut signal_buffer,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub get_local_registration_id: ::std::option::Option<
    unsafe extern "C" fn(
      user_data: *mut ::std::os::raw::c_void,
      registration_id: *mut u32,
    ) -> ::std::os::raw::c_int,
  >,
  pub save_identity: ::std::option::Option<
    unsafe extern "C" fn(
      address: *const signal_protocol_address,
      key_data: *mut u8,
      key_len: size_t,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub is_trusted_identity: ::std::option::Option<
    unsafe extern "C" fn(
      address: *const signal_protocol_address,
      key_data: *mut u8,
      key_len: size_t,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub destroy_func:
    ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
  pub user_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_signal_protocol_identity_key_store() {
  assert_eq!(
    ::std::mem::size_of::<signal_protocol_identity_key_store>(),
    48usize,
    concat!("Size of: ", stringify!(signal_protocol_identity_key_store))
  );
  assert_eq!(
    ::std::mem::align_of::<signal_protocol_identity_key_store>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(signal_protocol_identity_key_store)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_identity_key_store>())).get_identity_key_pair
        as *const _ as usize
    },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_identity_key_store),
      "::",
      stringify!(get_identity_key_pair)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_identity_key_store>())).get_local_registration_id
        as *const _ as usize
    },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_identity_key_store),
      "::",
      stringify!(get_local_registration_id)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_identity_key_store>())).save_identity as *const _
        as usize
    },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_identity_key_store),
      "::",
      stringify!(save_identity)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_identity_key_store>())).is_trusted_identity as *const _
        as usize
    },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_identity_key_store),
      "::",
      stringify!(is_trusted_identity)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_identity_key_store>())).destroy_func as *const _
        as usize
    },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_identity_key_store),
      "::",
      stringify!(destroy_func)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_identity_key_store>())).user_data as *const _ as usize
    },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_identity_key_store),
      "::",
      stringify!(user_data)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct signal_protocol_sender_key_store {
  pub store_sender_key: ::std::option::Option<
    unsafe extern "C" fn(
      sender_key_name: *const signal_protocol_sender_key_name,
      record: *mut u8,
      record_len: size_t,
      user_record: *mut u8,
      user_record_len: size_t,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub load_sender_key: ::std::option::Option<
    unsafe extern "C" fn(
      record: *mut *mut signal_buffer,
      user_record: *mut *mut signal_buffer,
      sender_key_name: *const signal_protocol_sender_key_name,
      user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub destroy_func:
    ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
  pub user_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_signal_protocol_sender_key_store() {
  assert_eq!(
    ::std::mem::size_of::<signal_protocol_sender_key_store>(),
    32usize,
    concat!("Size of: ", stringify!(signal_protocol_sender_key_store))
  );
  assert_eq!(
    ::std::mem::align_of::<signal_protocol_sender_key_store>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(signal_protocol_sender_key_store)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_sender_key_store>())).store_sender_key as *const _
        as usize
    },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_sender_key_store),
      "::",
      stringify!(store_sender_key)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_sender_key_store>())).load_sender_key as *const _
        as usize
    },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_sender_key_store),
      "::",
      stringify!(load_sender_key)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_sender_key_store>())).destroy_func as *const _ as usize
    },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_sender_key_store),
      "::",
      stringify!(destroy_func)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<signal_protocol_sender_key_store>())).user_data as *const _ as usize
    },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(signal_protocol_sender_key_store),
      "::",
      stringify!(user_data)
    )
  );
}
extern "C" {
  pub fn signal_context_create(
    context: *mut *mut signal_context,
    user_data: *mut ::std::os::raw::c_void,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_context_set_crypto_provider(
    context: *mut signal_context,
    crypto_provider: *const signal_crypto_provider,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_context_set_locking_functions(
    context: *mut signal_context,
    lock: ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
    unlock: ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_context_set_log_function(
    context: *mut signal_context,
    log: ::std::option::Option<
      unsafe extern "C" fn(
        level: ::std::os::raw::c_int,
        message: *const ::std::os::raw::c_char,
        len: size_t,
        user_data: *mut ::std::os::raw::c_void,
      ),
    >,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_context_destroy(context: *mut signal_context);
}
extern "C" {
  pub fn signal_protocol_store_context_create(
    context: *mut *mut signal_protocol_store_context,
    global_context: *mut signal_context,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_protocol_store_context_set_session_store(
    context: *mut signal_protocol_store_context,
    store: *const signal_protocol_session_store,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_protocol_store_context_set_pre_key_store(
    context: *mut signal_protocol_store_context,
    store: *const signal_protocol_pre_key_store,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_protocol_store_context_set_signed_pre_key_store(
    context: *mut signal_protocol_store_context,
    store: *const signal_protocol_signed_pre_key_store,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_protocol_store_context_set_identity_key_store(
    context: *mut signal_protocol_store_context,
    store: *const signal_protocol_identity_key_store,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_protocol_store_context_set_sender_key_store(
    context: *mut signal_protocol_store_context,
    store: *const signal_protocol_sender_key_store,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_protocol_store_context_destroy(context: *mut signal_protocol_store_context);
}
extern "C" {
  pub fn signal_protocol_session_load_session(
    context: *mut signal_protocol_store_context,
    record: *mut *mut session_record,
    address: *const signal_protocol_address,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_protocol_session_get_sub_device_sessions(
    context: *mut signal_protocol_store_context,
    sessions: *mut *mut signal_int_list,
    name: *const ::std::os::raw::c_char,
    name_len: size_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_protocol_session_store_session(
    context: *mut signal_protocol_store_context,
    address: *const signal_protocol_address,
    record: *mut session_record,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_protocol_session_contains_session(
    context: *mut signal_protocol_store_context,
    address: *const signal_protocol_address,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_protocol_session_delete_session(
    context: *mut signal_protocol_store_context,
    address: *const signal_protocol_address,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_protocol_session_delete_all_sessions(
    context: *mut signal_protocol_store_context,
    name: *const ::std::os::raw::c_char,
    name_len: size_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_protocol_pre_key_load_key(
    context: *mut signal_protocol_store_context,
    pre_key: *mut *mut session_pre_key,
    pre_key_id: u32,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_protocol_pre_key_store_key(
    context: *mut signal_protocol_store_context,
    pre_key: *mut session_pre_key,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_protocol_pre_key_contains_key(
    context: *mut signal_protocol_store_context,
    pre_key_id: u32,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_protocol_pre_key_remove_key(
    context: *mut signal_protocol_store_context,
    pre_key_id: u32,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_protocol_signed_pre_key_load_key(
    context: *mut signal_protocol_store_context,
    pre_key: *mut *mut session_signed_pre_key,
    signed_pre_key_id: u32,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_protocol_signed_pre_key_store_key(
    context: *mut signal_protocol_store_context,
    pre_key: *mut session_signed_pre_key,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_protocol_signed_pre_key_contains_key(
    context: *mut signal_protocol_store_context,
    signed_pre_key_id: u32,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_protocol_signed_pre_key_remove_key(
    context: *mut signal_protocol_store_context,
    signed_pre_key_id: u32,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_protocol_identity_get_key_pair(
    context: *mut signal_protocol_store_context,
    key_pair: *mut *mut ratchet_identity_key_pair,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_protocol_identity_get_local_registration_id(
    context: *mut signal_protocol_store_context,
    registration_id: *mut u32,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_protocol_identity_save_identity(
    context: *mut signal_protocol_store_context,
    address: *const signal_protocol_address,
    identity_key: *mut ec_public_key,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_protocol_identity_is_trusted_identity(
    context: *mut signal_protocol_store_context,
    address: *const signal_protocol_address,
    identity_key: *mut ec_public_key,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_protocol_sender_key_store_key(
    context: *mut signal_protocol_store_context,
    sender_key_name: *const signal_protocol_sender_key_name,
    record: *mut sender_key_record,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn signal_protocol_sender_key_load_key(
    context: *mut signal_protocol_store_context,
    record: *mut *mut sender_key_record,
    sender_key_name: *const signal_protocol_sender_key_name,
  ) -> ::std::os::raw::c_int;
}
